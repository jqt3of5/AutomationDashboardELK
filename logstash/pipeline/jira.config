input {
    jira_poller {
        baseurl => {
            method => get
            user => "${JIRA_USER}"
            password => "${JIRA_PWD}"
            url => "https://epm.verisk.com/jira"
            headers => {
                Accept => "application/json"
            }
        }
        projects => ["XMA", "XMI", "XMW"]
        jql => "issueType not in (Epic, Test) AND (created > startOfYear() or status changed to closed after startOfYear())"
        schedule => { in => "10s"}
        codec => "json"
    }
}

filter {

    if [issues] {
        split {
            field => "[issues]"
        }

        time_in_status {

        }
        ruby {
            path => "/Users/i52884/ELK/AutomationDashboard/logstash/pipeline/story_points.rb"
        }

        foreach {
            task_id => "%{[issues][key]}"
            field => "[issues][transitions]"
        }
        if [issues][transitions][status_id] {

            elasticsearch {
                hosts => ["localhost"]
                query => "id:%{[issues][transitions][status_id]}"
                fields => {
                    "id" => "[issues][transitions][status][id]"
                    "name" => "[issues][transitions][status][name]"
                    "[statusCategory][key]" => "[issues][transitions][status][statusCategory][key]"
                    "[statusCategory][name]" => "[issues][transitions][status][statusCategory][name]"
                }
                sort => "_id:desc"
                index => "jira_statuses"
            }

            elasticsearch {
                hosts => ["localhost"]
                query => "id:%{[issues][transitions][previous_status_id]}"
                fields => {
                    "id" => "[issues][transitions][previous_status][id]"
                    "name" => "[issues][transitions][previous_status][name]"
                    "[statusCategory][key]" => "[issues][transitions][previous_status][statusCategory][key]"
                    "[statusCategory][name]" => "[issues][transitions][previous_status][statusCategory][name]"
                }
                sort => "_id:desc"
                index => "jira_statuses"
            }

        }
        join {
            join_fields => ["[issues][transitions]"]
        }

        mutate {
            rename => {
                "[issues][id]" => "id"
                "[issues][key]" => "key"
                "[issues][fields][project][key]" => "project"
                "[issues][fields]" => "fields"
                "[issues][changelog]" => "changelog"
                "[issues][transitions]" => "transitions"
               }

            lowercase => ["project"]
        }
     }
}


output {
    if [issues] {
        #file { path => "jira_issues_%{[project]}.json" }
        #pipeline { send_to => [jira_transitions] }
        elasticsearch{
            index => "jira_issues_%{[project]}"
            hosts => ["localhost"]
            document_id => "%{[key]}"
            doc_as_upsert => true
            action => update
        }
    } else {
        #file { path => "jira_errors.json" }
        elasticsearch{
            index => "jira_polling_errors"
            hosts => ["localhost"]
        }

    }
}